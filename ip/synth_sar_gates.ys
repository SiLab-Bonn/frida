# Physical-level synthesis script for discrete logic gates
# Targets: NAND, NOR, NOT, MUX, DFF (no PDK mapping)

# Read the Verilog source
read_verilog sar.v

# Set the top module
hierarchy -top sar_logic -check

# Print initial statistics
stat

# Perform full synthesis to get everything ready
synth -top sar_logic

# Convert to basic logic gates using ABC with specific gate library
# This maps to discrete NAND, NOR gates (NOT is automatic), plus MUX
# -dff flag processes flip-flops through ABC as well
# abc -g NAND,NOR,MUX -dff

# Alternative gate mappings (uncomment one if desired):
# abc -g cmos2 -dff       # NAND and NOR only
# abc -g simple -dff      # AND, OR, XOR, MUX 
abc -g gates -dff       # Full gate set: AND, NAND, OR, NOR, XOR, XNOR, ANDNOT, ORNOT

# Clean up the netlist
opt_clean

# Print statistics showing discrete gate count
stat

# Generate outputs with clean gate-level netlist
write_verilog -noattr -noexpr synth_sar_gates.v
write_json synth_sar_gates.json
write_blif synth_sar_gates.blif

# Create dot file for gate-level visualization
show -prefix sar_gates -format dot -stretch

# Print final gate count summary
tee -o synth_gates_report.txt stat
