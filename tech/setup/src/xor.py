import sys
import time
import pathlib
import shutil
import general
import settings
import LTBsettings
import LTBfunctions
import mygdsii
import drc

USERset = settings.USERsettings()
PROJset = settings.PROJECTsettings()


def prepare_xor_source(project, cellname, gdsfile1, gdsfile2):
    for gdsfile, xorpath in [(gdsfile1, LTBsettings.xorgds1filepath),
                             (gdsfile2, LTBsettings.xorgds2filepath)]:
        filename = pathlib.Path(gdsfile).name
        shutil.copy2(gdsfile, xorpath(project, cellname)+filename)


def prepare_xor_dir_server(project, cellname, simserver=None, linuxusername=None):
    global USERset
    USERset.load()
    if simserver is None:
        simserver = USERset.get_str('simserver')
    if linuxusername is None:
        linuxusername = USERset.get_str('linuxusername')

    general.check_linux_samba(simserver, linuxusername)

    sambaxorpaths = LTBsettings.sambaxorpaths(project, cellname, simserver,
                                              linuxusername)
    general.prepare_dirs(sambaxorpaths)


def prepare_xor_ctrlfile(project, gdsfile1, gdsfile2, cellname1, cellname2,
                         linuxusername=None):
    # think of getting all layers out yourself, gdsii.load takes more memory
    # than necessary in this scope.
    # info on gdsII file structure
    # http://boolean.klaasholwerda.nl/interface/bnf/gdsformat.html#rec_header

    global USERset
    USERset.load()
    if linuxusername is None:
        linuxusername = USERset.get_str('linuxusername')

    filename1 = pathlib.Path(gdsfile1).name
    filename2 = pathlib.Path(gdsfile2).name

    layers = []
    for gdsfile in [gdsfile1, gdsfile2]:
        layers.extend(mygdsii.layers_used(gdsfile))

    layers = list(set(layers))
    layers.sort()
    print('Layers used:')
    for gdsnr, gdsdt in layers:
        print(str(gdsnr) + ' / ' + str(gdsdt))
    maxlayer = gdsnr
    bumplayer = maxlayer + 1

    cellname = '__'.join([cellname1, cellname2])

    with open(LTBsettings.xorctrlfilepath(project, cellname) +
              cellname + '.XORctrl', 'w') as ctrl:
        ctrl.write('/*=====================================================' +
                   """========================
Rules generated by LayoutToolbox xor.py

This file includes SVRF/TVF Technology under license by Mentor Graphics Corp.
"SVRF/TVF Technology" shall mean Mentor Graphics' Standard Verification Rule
Format ("SVRF") and Tcl Verification Format ("TVF") proprietary syntaxes for
expressing process rules. You shall not use SVRF/TVF Technology unless you are
a Mentor Graphics customer with a license to use the applicable Mentor Graphics
software. The exact terms of your obligations and rights are governed by your
respective license. You shall not use SVRF/TVF Technology except:
(a) for your internal business purposes and
(b) for use with Mentor Graphics' Calibre(R) tools.
All SVRF/TVF Technology constitutes or contains trade secrets and confidential
information of Mentor Graphics or its licensors. You shall not make SVRF/TVF
Technology available in any form to any person other than your employees and
on-site contractors, excluding Mentor Graphics competitors, whose job
performance requires access and who are under obligations of confidentiality.
=============================================================================*/

LAYOUT SYSTEM GDS
LAYOUT SYSTEM2 GDS
""")
        ctrl.write('LAYOUT PRIMARY "' + cellname1 + '"\n')
        ctrl.write('LAYOUT PRIMARY2 "' + cellname2 + '"\n')
        ctrl.write('//=======================================' +
                   '=======================================\n')
        ctrl.write('LAYOUT PATH "' +
                   LTBsettings.linuxxorgds1filepath(project, cellname, linuxusername) +
                   filename1 + '"\n')
        ctrl.write('LAYOUT PATH2 "' +
                   LTBsettings.linuxxorgds2filepath(project, cellname, linuxusername) +
                   filename2 + '"\n')
        ctrl.write('''LAYOUT ERROR ON INPUT NO
DRC KEEP EMPTY NO
//==============================================================================
DRC RESULTS DATABASE "''' + LTBsettings.linuxxorresultfilepath(project, cellname, linuxusername) + cellname + '''.xor.results" ASCII
DRC SUMMARY REPORT "''' + LTBsettings.linuxxorresultfilepath(project, cellname, linuxusername) + cellname + '''.xor.summary" HIER
DRC CELL NAME YES CELL SPACE XFORM
DRC MAXIMUM RESULTS ALL

LAYOUT BUMP2 ''' + str(bumplayer) + '''
LAYOUT USE DATABASE PRECISION YES
LAYOUT PROCESS BOX RECORD YES
LAYOUT INPUT EXCEPTION SEVERITY DATATYPE_MAP_TARGET 2
//==============================================================================
//   XOR RULES
//==============================================================================
''')
        maplayer = 256*256
        xorgds = LTBsettings.linuxxorresultfilepath(project, cellname, linuxusername) + cellname + '.xor.gds'
        for gdsnr, gdsdt in layers:
            maplayer -= 2
            gds2nr = gdsnr + bumplayer
            ctrl.write('LAYER MAP ' + str(gdsnr) + ' DATATYPE ' + str(gdsdt) +
                       ' ' + str(maplayer+1) + '\nLAYER MAP ' + str(gds2nr) +
                       ' DATATYPE ' + str(gdsdt) + ' ' + str(maplayer) +
                       '\nLAYER L' + str(gdsnr) + '_D' + str(gdsdt) + ' ' +
                       str(maplayer+1) + '\nLAYER B_L' + str(gdsnr) + '_D' +
                       str(gdsdt) + ' ' + str(maplayer) +
                       '\nDRC CHECK MAP L' + str(gdsnr) + '_D' + str(gdsdt) +
                       ' GDSII ' + str(gdsnr) + ' ' + str(gdsdt) + ' "' +
                       xorgds + '" PREFIX "xor_"\nDRC CHECK MAP L' + str(gdsnr) + '_D' +
                       str(gdsdt) + ' ASCII\nL' + str(gdsnr) + '_D' +
                       str(gdsdt) + ' { @ compare layer ' + str(gdsnr) +
                       ' datatype ' + str(gdsdt) + '\n\tXOR L' + str(gdsnr) +
                       '_D' + str(gdsdt) + ' B_L' + str(gdsnr) + '_D' +
                       str(gdsdt) + '\n}\n//==============================' +
                       '================================================\n')


def prepare_xor_copy2linux(project, cellname, gdsfile1, gdsfile2,
                           simserver=None, linuxusername=None):
    global USERset
    USERset.load()

    if simserver is None:
        simserver = USERset.get_str('simserver')
    if linuxusername is None:
        linuxusername = USERset.get_str('linuxusername')

    general.check_linux_samba(simserver, linuxusername)

    filename1 = pathlib.Path(gdsfile1).name
    filename2 = pathlib.Path(gdsfile2).name

    src = LTBsettings.xorctrlfilepath(project, cellname) + cellname + '.XORctrl'
    dst = LTBsettings.linux2samba(
            LTBsettings.linuxxorctrlfilepath(project, cellname, linuxusername),
            simserver) + cellname + '.XORctrl'
    shutil.copy2(src, dst)

    for filename, xorpath, linuxxorpath in [
            (filename1, LTBsettings.xorgds1filepath,
             LTBsettings.linuxxorgds1filepath),
            (filename2, LTBsettings.xorgds2filepath,
             LTBsettings.linuxxorgds2filepath)]:
        src = xorpath(project, cellname) + filename
        dst = LTBsettings.linux2samba(linuxxorpath(project, cellname, linuxusername),
                                      simserver) + filename
        file_stats = general.os.stat(src)
        print('Copying gds to server ... (' + 
              str(round(file_stats.st_size / (1024 * 1024), 2)) + ' Mb)')
        shutil.copy2(src, dst)


def cal_xor(project, cellname, RunPrep, background=True, simserver=None,
            linuxusername=None, hier=True):
    import subprocess
    global USERset
    USERset.load()

    if simserver is None:
        simserver = USERset.get_str('simserver')
    if linuxusername is None:
        linuxusername = USERset.get_str('linuxusername')
    no_antispoof = general.check_linux_plink(simserver, linuxusername)

    if hier:
        calcommand = ('-v xor -p ' + project + ' -c '+ cellname +
                      ' calibre -drc -hier ' + LTBsettings.linuxxorctrlfilepath(
                      project, cellname, linuxusername) + cellname + '.XORctrl')
    else:
        calcommand = ('-v xor -p ' + project + ' -c '+ cellname +
                      ' calibre -drc ' + LTBsettings.linuxxorctrlfilepath(
                      project, cellname, linuxusername) + cellname + '.XORctrl')

    if background:
        # nohup didn't work as intended, the calibre_bg.py has to be copied to
        # the user's /bin folder
        # nohup allows programs to continue in background if putty were closed
        # calcommand = 'nohup ' + calcommand
        # calibre_bg.py forks a process and actively ends the initial process.
        # THAT LAST STATEMENT SEEMS NOT BE WORKING PROPERLY ON ALL MACHINES ,
        # arrange tmp fix
        calcommand = ('python /home/' + linuxusername + '/bin/calibre_bg.py ' +
                      RunPrep + ' ' + calcommand)

    plinkcommand = ['plink', '-ssh', linuxusername + '@' + simserver,
                    no_antispoof, calcommand]

    print(plinkcommand)
    # tmp fix
    print('\nStop this window from blocking your progress in L-Edit: Press' +
          ' [Ctrl]+[C] 2x')
    print('Your verification will continue runnning on the Linux machine. ')
    p = subprocess.Popen(plinkcommand, stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    (output, error) = p.communicate()
    if error != '':
        Exception(error)


def prep_cal_xor(project, cellname, background=True, simserver=None,
                 linuxusername=None, hier=True):
    cal_xor(project, cellname, 'prepare', background, simserver, linuxusername, hier)


def run_cal_xor(project, cellname, background=True, simserver=None,
                linuxusername=None, hier=True):
    raise Exception('Obsolete function run_cal_xor')
    cal_xor(project, cellname, 'run', background, simserver, linuxusername, hier)


def xor_split_result(project=None, cellname=None, filename=None, maxerr=500):
    if filename is None:
        xorresultsfilename = (LTBsettings.xorresultfilepath(project, cellname) +
                              cellname + '.xor.results')
    else:
        xorresultsfilename = filename
    
    drc.drc_split_result(project, cellname, xorresultsfilename, maxerr)

def argparse_setup(subparsers):
    parser_xor_pxd = subparsers.add_parser(
            'prepare_xor_dir', help='prepare all folders for XOR for a given' +
            ' project')
    parser_xor_pxd.add_argument(
            '-p', '--project', required=True, help='the PROJECT name')
    parser_xor_pxd.add_argument(
            '-c', '--cellname', required=True, help='the CELL name (for xor:' +
            ' cellname1__cellname2)')

    parser_xor_pxds = subparsers.add_parser(
            'prepare_xor_dir_server', help='prepare all folders for XOR for ' +
            'a given project on the Calibre server')
    parser_xor_pxds.add_argument(
            '-p', '--project', required=True, help='the PROJECT name')
    parser_xor_pxds.add_argument(
            '-c', '--cellname', required=True, help='the CELL name (for xor:' +
            ' cellname1__cellname2)')
    parser_xor_pxds.add_argument(
            '-s', '--server', default=None, help='the (linux) Calibre server' +
            r' (default: defined in T:\LayoutToolbox\settings\user.ini)')
    parser_xor_pxds.add_argument(
            '-u', '--username', default=None, help='your username on the ' +
            '(linux) Calibre server (default: defined in ' +
            r'T:\LayoutToolbox\settings\user.ini)')

    parser_xor_pxs = subparsers.add_parser(
            'prepare_xor_source', help='prepare source gds files for 2 ' +
            'given files')
    parser_xor_pxs.add_argument(
            '-p', '--project', required=True, help='the project (host for ' +
            'file storage)')
    parser_xor_pxs.add_argument(
            '-c', '--cellname', required=True, help='the CELL name (for xor:' +
            ' cellname1__cellname2)')
    parser_xor_pxs.add_argument(
            '-f1', '--file1', required=True, help='the 1st GDS file name ' +
            '(full path)')
    parser_xor_pxs.add_argument(
            '-f2', '--file2', required=True, help='the 2nd GDS file name ' +
            '(full path)')

    parser_xor_pxc = subparsers.add_parser(
            'prepare_xor_ctrlfile', help='prepare XOR control file for 2 ' +
            'given files and cellnames')
    parser_xor_pxc.add_argument(
            '-p', '--project', required=True, help='the project (host for ' +
            'file storage)')
    parser_xor_pxc.add_argument(
            '-f1', '--file1', required=True, help='the 1st GDS file name ' +
            '(full path or filename)')
    parser_xor_pxc.add_argument(
            '-f2', '--file2', required=True, help='the 2nd GDS file name ' +
            '(full path or filename)')
    parser_xor_pxc.add_argument(
            '-c1', '--cell1', required=True, help='the 1st GDS file name\'s' +
            ' cell to compare')
    parser_xor_pxc.add_argument(
            '-c2', '--cell2', required=True, help='the 2nd GDS file name\'s' +
            ' cell to compare')
    parser_xor_pxc.add_argument(
            '-u', '--username', default=None, help='your username on the ' +
            '(linux) Calibre server (default: defined in ' +
            r'T:\LayoutToolbox\settings\user.ini)')

    parser_xor_pxc2l = subparsers.add_parser(
            'prepare_xor_copy2linux', help='copy files to linux XOR server ' +
            'for a given project and cellname')
    parser_xor_pxc2l.add_argument(
            '-p', '--project', required=True, help='the PROJECT name')
    parser_xor_pxc2l.add_argument(
            '-c', '--cellname', required=True, help='the CELL name')
    parser_xor_pxc2l.add_argument(
            '-f1', '--file1', required=True, help='the 1st GDS file name ' +
            '(full path or filename)')
    parser_xor_pxc2l.add_argument(
            '-f2', '--file2', required=True, help='the 2nd GDS file name ' +
            '(full path or filename)')
    parser_xor_pxc2l.add_argument(
            '-s', '--server', default=None, help='the (linux) Calibre server' +
            r' (default: defined in T:\LayoutToolbox\settings\user.ini)')
    parser_xor_pxc2l.add_argument(
            '-u', '--username', default=None, help='your username on the ' +
            '(linux) Calibre server (default: defined in ' +
            r'T:\LayoutToolbox\settings\user.ini)')

    parser_xor_pcx = subparsers.add_parser(
            'prep_cal_xor', help='prepare Cal1 helper command files')
    parser_xor_pcx.add_argument(
            '-p', '--project', required=True, help='the PROJECT name')
    parser_xor_pcx.add_argument(
            '-c', '--cellname', required=True, help='the CELL name')
    parser_xor_pcx.add_argument(
            '-s', '--server', default=None, help='the (linux) Calibre server' +
            r' (default: defined in T:\LayoutToolbox\settings\user.ini)')
    parser_xor_pcx.add_argument(
            '-u', '--username', default=None, help='your username on the ' +
            '(linux) Calibre server (default: defined in ' +
            r'T:\LayoutToolbox\settings\user.ini)')
    parser_xor_pcx.add_argument(
            '-hier', required=False, default=False, action='store_true',
            help='run hierarchical Calibre')
    parser_xor_pcx.add_argument(
            '-nobg', '--nobackground', dest='background', required=False, 
            default=True, action='store_false', help='runs not in background')

    parser_xor_rcx = subparsers.add_parser(
            'run_cal_xor', help='copy files to linux Calibre server for a ' +
            'given project and cellname')
    parser_xor_rcx.add_argument(
            '-p', '--project', required=True, help='the PROJECT name')
    parser_xor_rcx.add_argument(
            '-c', '--cellname', required=True, help='the CELL name')
    parser_xor_rcx.add_argument(
            '-s', '--server', default=None, help='the (linux) Calibre server' +
            r' (default: defined in T:\LayoutToolbox\settings\user.ini)')
    parser_xor_rcx.add_argument(
            '-u', '--username', default=None, help='your username on the ' +
            '(linux) Calibre server (default: defined in ' +
            r'T:\LayoutToolbox\settings\user.ini)')
    parser_xor_rcx.add_argument(
            '-hier', required=False, default=False, action='store_true',
            help='run hierarchical Calibre')
    parser_xor_rcx.add_argument(
            '-nobg', '--nobackground', dest='background', required=False, 
            default=True, action='store_false', help='runs not in background')

    parser_xor_spl = subparsers.add_parser(
            'xor_split_result', help='splits the xor results in the result ' +
            'file into smaller groups for browsing in L-Edit')
    parser_xor_spl.add_argument(
            '-p', '--project', required=True, help='the PROJECT name')
    parser_xor_spl.add_argument(
            '-c', '--cellname', required=True, help='the CELL name')
    parser_xor_spl.add_argument(
            '-f', '--filename', default=None,
            help=('the xor.result file name, default: the xor report of the ' +
                  r'cell in the xor result file location'))
    parser_xor_spl.add_argument(
            '-x', '--maxerr', required=True, type=int, 
            help='Max error count per rule')


def argparse_eval(args):
    # make a dict of args
    dictargs = vars(args)
    funcdict = {'prepare_xor_dir': (LTBfunctions.prepare_xor_dir,
                                    [dictargs.get('project'),
                                     dictargs.get('cellname')]),
                'prepare_xor_dir_server': (prepare_xor_dir_server,
                                           [dictargs.get('project'),
                                            dictargs.get('cellname'),
                                            dictargs.get('server'),
                                            dictargs.get('username')]),
                'prepare_xor_source': (prepare_xor_source,
                                       [dictargs.get('project'),
                                        dictargs.get('cellname'),
                                        dictargs.get('file1'),
                                        dictargs.get('file2')]),
                'prepare_xor_ctrlfile': (prepare_xor_ctrlfile,
                                         [dictargs.get('project'),
                                          dictargs.get('file1'),
                                          dictargs.get('file2'),
                                          dictargs.get('cell1'),
                                          dictargs.get('cell2'),
                                          dictargs.get('username')]),
                'prepare_xor_copy2linux': (prepare_xor_copy2linux,
                                           [dictargs.get('project'),
                                            dictargs.get('cellname'),
                                            dictargs.get('file1'),
                                            dictargs.get('file2'),
                                            dictargs.get('server'),
                                            dictargs.get('username')]),
                'prep_cal_xor': (prep_cal_xor,
                                 [dictargs.get('project'),
                                  dictargs.get('cellname'),
                                  dictargs.get('background'),
                                  dictargs.get('server'),
                                  dictargs.get('username'),
                                  dictargs.get('hier')]),
                'run_cal_xor': (run_cal_xor,
                                [dictargs.get('project'),
                                 dictargs.get('cellname'),
                                 dictargs.get('background'),
                                 dictargs.get('server'),
                                 dictargs.get('username'),
                                 dictargs.get('hier')]),
                'xor_split_result': (xor_split_result,
                                 [dictargs.get('project'),
                                  dictargs.get('cellname'),
                                  dictargs.get('filename'),
                                  dictargs.get('maxerr')])
                }
    return funcdict


if __name__ == "__main__":
    general.logsetup()
    general.myargparse(argparse_setup, argparse_eval, 'v20240507')
